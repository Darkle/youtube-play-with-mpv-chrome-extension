import './styles/popup.css'

import html from 'nanohtml'
import axios from 'axios'

type Video = {videoTitle: string, videoId:string};
type AllSitesMessage = {youtubeLinksVideoIds:Array<string>, allSites: boolean};
videoLinksContainer = document.querySelector('#videoLinks')
googleApiUrl = 'https://www.googleapis.com/youtube/v3/videos'

chrome.tabs.query({active: true, currentWindow: true}, tabs ->
  activeTabUrl = tabs[0].url
  if activeTabUrl.startsWith('https://www.youtube.com/') && activeTabUrl.includes('watch?v='):
    //open MPV
    //say we're opening in the popup.html
    console.log('open striaght away in MPV')
  else:
    videoLinksContainer.style.display = 'flex'
    injectContentScripts(tabs[0].id)
)

injectContentScripts(tabId:number):void ->
  chrome.tabs.executeScript({file: 'all-sites-content-script.js'})
  chrome.webNavigation.getAllFrames({tabId}, frames ->
    for elem {frameId, url} in frames:
      if url.startsWith('https://www.youtube.com/embed/'):
        chrome.tabs.executeScript({
          file: 'youtube-embeds-content-script.js',
          allFrames: true,
          frameId
        })
  )

chrome.runtime.onMessage.addListener(messageHandler)

messageHandler(messageData:Video|AllSitesMessage): void ->
  if !messageData.allSites:
    return addLinkToPage(messageData)
  getVideoTitles(messageData.youtubeLinksVideoIds)
    .then(videoData -> videoData.forEach(addLinkToPage))

addLinkToPage({videoTitle, videoId}:Video):void ->
  // don't add duplicates.
  if document.querySelector(`#mpv-${ videoId }`): return

  videoLinksContainer.appendChild(
    html`
      <a id="mpv-${ videoId }" class="linkCard"
          href="https://www.youtube.com/watch?v=${ videoId }"
          onclick=${ linkClickHandler }>
        <img class="mpvIcon" src="mpv-logo-128.png">
        <img src="https://i.ytimg.com/vi/${ videoId }/hqdefault.jpg"
            class="videoImage">
        <h5>${ videoTitle }</h5>
      </a>
    `
  )

linkClickHandler(event) ->
  event.preventDefault()
  console.log(event.currentTarget.getAttribute('href'))

getVideoTitles(videoIds:Array<string>):Promise ->
  axios.get(googleApiUrl, {
    params: {
      id: videoIds.join(),
      part: 'snippet',
      key: process.env.YOUTUBE_API_KEY
    }
  }).then(response ->
    videoItems = response?.data?.items
    if videoItems?.length < 1: return []
    videoItems.map(videoItem ->
      {
        videoTitle: videoItem?.snippet?.title,
        videoId: videoItem.id
      }
    )
  )
  .catch(e -> console.error(e))

